<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Digital Signal Processing on Ther&#39;s Blog</title>
        <link>https://ther-nullptr.github.io/tags/digital-signal-processing/</link>
        <description>Recent content in Digital Signal Processing on Ther&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 25 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ther-nullptr.github.io/tags/digital-signal-processing/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>DCT</title>
        <link>https://ther-nullptr.github.io/posts/digital_signal_processing/dct/</link>
        <pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ther-nullptr.github.io/posts/digital_signal_processing/dct/</guid>
        <description>&lt;h2 id=&#34;dct&#34;&gt;DCT&lt;/h2&gt;
&lt;p&gt;DCT一般用于图像处理。我们使用L2距离来量化编码误差。为了便于观看，我们倾向于保留&lt;strong&gt;低频分量&lt;/strong&gt;。被截断的系数的能量越小，编码误差越小。&lt;/p&gt;
&lt;p&gt;如果将DFT作用于图像处理有以下缺陷：由于DFT的信号由周期延拓得到，使得包络和相位不连续，引入高频分量。对此，可以将原序列对称扩展到2N个点，然后做2N点周期延拓。&lt;/p&gt;
&lt;p&gt;首先列出DCT的定义：
$$
X_{DCT}[k] = \begin{cases}
\sqrt{\frac{1}{N}}\sum_{n=0}^{N-1}x[n],k=0\
\sqrt{\frac{2}{N}}\sum_{n=0}^{N-1}x[n]{\rm cos}(\frac{\pi}{2N}k(2n+1)), elsewhere \
\end{cases}
$$
为什么要有k=0的特例？保范。&lt;/p&gt;
&lt;p&gt;这个公式实际上来源于2N点延拓的DFT：
$$
X_2[k]=\sum_{n=0}^{2N-1}x_2[n]W_{2N}^{kn}=\sum_{n=0}^{N-1}x&lt;a class=&#34;link&#34; href=&#34;W_%7b2N%7d%5e%7bkn%7d&amp;#43;W_%7b2N%7d%5e%7b-k%28n&amp;#43;1%29%7d&#34; &gt;n&lt;/a&gt; = 2e^{j\frac{\pi}{2N}k}\sum_{n=0}^{N-1}x[n]{\rm cos}(\frac{\pi}{2N}k(2n+1))
$$
可以看到，这个公式与DCT的公式只有一个系数的区别。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$e^{j\frac{\pi}{2N}k}$这个系数来源于何处？实际上观察2N点延拓后的序列，它并非完全偶对称的，其DFT也并非实序列。这一系数可以看做一个平移系数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DCT的快速算法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;2N点DFT$X_1[k]$。&lt;/li&gt;
&lt;li&gt;取$\frac{1}{\sqrt{N}}Re{X_1[k]e^{-j\pi\frac{k}{2N}}}$，按照k=0调整系数。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>FFT</title>
        <link>https://ther-nullptr.github.io/posts/digital_signal_processing/fft/</link>
        <pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ther-nullptr.github.io/posts/digital_signal_processing/fft/</guid>
        <description>&lt;h2 id=&#34;fft&#34;&gt;FFT&lt;/h2&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&#34;按频率抽取&#34;&gt;按频率抽取&lt;/h3&gt;
&lt;p&gt;按频率抽取的情况下，$x[n]$是有序的。序列的分治通过$x[n]$的&lt;strong&gt;前后划分&lt;/strong&gt;来实现。&lt;/p&gt;
&lt;p&gt;对于基$b$的FFT，我们不妨对$N$点序列进行以下划分：$x_1[n] = x[n],\ x_2[n] = x[n+\frac{N}{b}],\ &amp;hellip; \ x_b[n] = x[n+\frac{(b-1)N}{b}],\ n=0,1&amp;hellip;\frac{N}{b}-1$。&lt;/p&gt;
&lt;p&gt;这样，我们就可以对DFT表达式进行分解:
$$
X[k] = \sum_{n=0}^{\frac{N}{b}-1} [x_1[n]W_{N}^{nk} + x_2[n]W_{N}^{(n+\frac{N}{b})k}+&amp;hellip;+x_b[n]W_N^{(n+\frac{(b-1)N}{b})k}]
$$
使用$bk,bk+1,&amp;hellip;,bk+b-1$对$k$进行替换，就可以将$W_{N}^{nk}$替换为$W_{\frac{N}{b}}^{nk}$，以实现递归。带入后的表达式如下：
$$
X[bk+m]  = \sum_{n=0}^{\frac{N}{b}-1}{x[n]+x[n+\frac{N}{b}]W_{b}^{m}+x[n+\frac{2N}{b}]W_{b}^{2m}&amp;hellip;+x[n+\frac{(b-1)N}{b}]W_{b}^{(b-1)m}}W_{\frac{N}{b}}^{nk}W_N^{nm} 
$$
对于单位根系数有简单的记忆技巧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基2 $(1,1)\ (1,-1)$&lt;/li&gt;
&lt;li&gt;基3 $(1,1,1)\ (1,W_3^1,W_3^2)\ (1,W_3^2,W_3^4)$&lt;/li&gt;
&lt;li&gt;基4 $(1,1,1,1)\ (1,-i,-1,i) \ (1,-1,1,-1) \ (1,i,-1,-i)$&lt;/li&gt;
&lt;li&gt;基n 可以考虑每一个分量分别是旋转$m$次，每次顺时针旋转$\frac{2\pi}{b}$所得到的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;按时间抽取&#34;&gt;按时间抽取&lt;/h3&gt;
&lt;p&gt;按时间抽取的情况下，$X[k]$是有序的。序列的分治通过$x[n]$的&lt;strong&gt;模划分&lt;/strong&gt;来实现。&lt;/p&gt;
&lt;p&gt;对于基$b$的FFT，其DFT可以写为如下形式：
$$
X[k] = \sum_{n=0}^{\frac{N}{b}-1}x[bn]W_{\frac{N}{b}}^{kn} + W_{N}^{k}\sum_{n=0}^{\frac{N}{b}-1}x[bn+1]W_{\frac{N}{b}}^{kn} + &amp;hellip; + W_{N}^{(b-1)k}\sum_{n=0}^{\frac{N}{b}-1}x[bn+b-1]W_{\frac{N}{b}}^{kn}
$$
使用$k,k+\frac{N}{b},&amp;hellip;,k+\frac{(b-1)N}{b}$对$k$进行代换，可以得到：
$$
X[k+\frac{mN}{b}] = \sum_{n=0}^{\frac{N}{b}-1}{x[bn]+x[bn+1]W_b^mW_N^k+x[bn+2]W_b^{2m}W_N^{2k}+&amp;hellip;+x[bn+b-1]W_b^{(b-1)m}W_N^{(b-1)k}}W_{\frac{N}{b}}^{kn}
$$&lt;/p&gt;
&lt;h3 id=&#34;应用&#34;&gt;应用&lt;/h3&gt;
&lt;h4 id=&#34;卷积&#34;&gt;卷积&lt;/h4&gt;
&lt;p&gt;考虑一个长度为$L$的序列$x_1[n]$和一个长度为$P$的序列$x_2[n]$，卷积后的序列$y[n]$长度为$(L+P-1)$。将$y[n]$按照$N$点混叠得到$N$点循环卷积$\bar y_N[n]$，当$N&amp;gt;L+P$，则可以将$X_1[k]X_2[k]$的循环卷积变换为$X_1(e^{j\omega})X_2(e^{j\omega})$的线性卷积（参考循环卷积的频域理解）。&lt;/p&gt;
&lt;p&gt;如果$P$较小，则需要对$x_2[n]$大量补0，导致计算量增大，对此需要对$x_1[n]$分段切割，表示为长度为$L$的平移有限长序列之和：
$$
x[n] = \sum_{r=0}^{\infty}x_r[n-rL] \
x_r[n] = x[n+rL], 0\le n\le L-1
$$
分段计算线性卷积$y_r[n] = x_r[n] * h[n]$，使用$N\ge L+P-1$点DFT计算线性卷积，得到的序列。由于每一个分割后的序列段长度为$L$，所以上述卷积长度为$L+P-1$，各序列段的卷积将会重叠$P-1$点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重叠相加法：
&lt;ol&gt;
&lt;li&gt;将$x[n]$拆分成$L$点长的子段$x_r[n]$&lt;/li&gt;
&lt;li&gt;将$h[n]$补零做$L+P-1$点FFT$H_{L+P-1}[k]$&lt;/li&gt;
&lt;li&gt;将$x_r[n]$补零做$L+P-1$点FFT$X_r [k]$&lt;/li&gt;
&lt;li&gt;$X_r[k]$和$H_{L+P-1}[k]$逐点相乘后作$L+P-1$点IFFT得$y_r[n]$&lt;/li&gt;
&lt;li&gt;平移$rL$点后重叠相加$y[n] = \sum_{r=0}^{\infty}y_r[n-rL]$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;重叠保留法：
&lt;ol&gt;
&lt;li&gt;$h[n]$做$L$点FFT$H_L[k]$&lt;/li&gt;
&lt;li&gt;将$x[n]$分为长度为$L$的序列段，使得每个输人段与先
前的序列段重叠$(P-1)$点，也就是$x_r[n]=x[n+r(L-P+1)-P+1]\ (0\le n \le L-1)$。&lt;/li&gt;
&lt;li&gt;做卷积$y_{rp}[n]=h[n]*x_r[n]$（使用FFT和IFFT）&lt;/li&gt;
&lt;li&gt;由于各段$x_r[n]$之间有交叠，所以$y_{rp}[n]$的重复段$0\le n \le P-2$段被去掉，新的子序列$y_r[n] = y_{rp}[n](P-1\le n \le L-1)$&lt;/li&gt;
&lt;li&gt;平移$r(L-P+1)$点后重叠相加$y[n] = \sum_{r=0}^{\infty}y_r[n-r(L-P+1)+P-1]$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;相关&#34;&gt;相关&lt;/h4&gt;
&lt;p&gt;将一个序列进行反转共轭 ${\rm FFT}{y^{&lt;em&gt;}[-n]}=Y^{&lt;/em&gt;}[k]$ 后计算卷积。&lt;/p&gt;
&lt;h4 id=&#34;短时fft&#34;&gt;短时FFT&lt;/h4&gt;
&lt;p&gt;$$
X[k,n+1]=(X[k,n]-x[n-W+1]+x[n+1])e^{j2\pi\frac{k}{W}}
$$&lt;/p&gt;
</description>
        </item>
        <item>
        <title>DFT</title>
        <link>https://ther-nullptr.github.io/posts/digital_signal_processing/dft/</link>
        <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ther-nullptr.github.io/posts/digital_signal_processing/dft/</guid>
        <description>&lt;h2 id=&#34;dft&#34;&gt;DFT&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;
$$
X[k] = \sum_{n=0}^{N-1}x[n] e^{-j2\pi\frac{nk}{N}} = \sum_{n=0}^{N-1}x[n]W_{N}^{nk}
$$
&lt;strong&gt;单位根表示&lt;/strong&gt;
$$
W_{N}^k = e^{-j2\pi\frac{k}{N}}
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$N$代表将单位圆平均分成的份数，$k$则相当于旋转的次数。整体上可以看成一个绕原点进行&lt;strong&gt;顺时针&lt;/strong&gt;旋转的单位向量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;DFT vs DTFT&lt;/strong&gt;
$$
X(\omega)|&lt;em&gt;{\omega=2\pi\frac{k}{N}} = X[k]
$$
&lt;strong&gt;IDFT&lt;/strong&gt;
$$
x[r]=\frac{1}{N}\sum&lt;/em&gt;{k=0}^{N-1}X[k]e^{j2\pi\frac{rk}{N}}
$$
&lt;strong&gt;性质&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;共轭：${\rm DFT}{x^{\ast}[n]} = X^{\ast}[N-k]$&lt;/p&gt;
&lt;p&gt;（时域共轭，频域共轭+循环反转）&lt;/p&gt;
&lt;p&gt;反转：${\rm DFT}{x[((-n))_N]}=X[((-k))_N]R_N[k]$&lt;/p&gt;
&lt;p&gt;（时域循环反转，频域循环反转）&lt;/p&gt;
&lt;p&gt;对称：${\rm DFT}{\Re{x[n]}}=X_e[k]$ ${\rm DFT}{j\Im{x[n]}}=X_o[k]$ $\Re{X[k]}={{\rm DFT} {x_e[n]}}$ $j\Im{X[k]}={{\rm DFT} {x_o[n]}}$&lt;/p&gt;
&lt;p&gt;（推论：实序列的DFT共轭偶对称，即$X[k] = X^*[N-k] $）&lt;/p&gt;
&lt;p&gt;对偶：${\rm DFT}{X[k]}=Nx[((-n))_N]R_N[n]$&lt;/p&gt;
&lt;p&gt;（直观理解：DFTMatrix的$N-k$行和IDFTMatrix的$k$行相同，如果不考虑系数）&lt;/p&gt;
&lt;p&gt;循环位移：${\rm DFT}{x[((n-m))_N]R_N[n]} = W_N^{mk}X[k]$&lt;/p&gt;
&lt;p&gt;（DTFT的位移变成了DFT的循环位移，$m$理论上可以取非整数）&lt;/p&gt;
&lt;p&gt;循环卷积：${\rm IDFT}{X[k]Y[k]}=\sum_{m=0}^{N-1}x[m]y[((n-m))_N]$&lt;/p&gt;
&lt;p&gt;（把传统线性卷积的反转+位移变为循环反转+循环位移。&lt;strong&gt;时域理解&lt;/strong&gt;：将有限序列进行周期延拓后，形成以$N$为周期的序列，在主值区间上进行线性卷积 &lt;strong&gt;频域理解&lt;/strong&gt;：线性卷积以$N$为周期进行混叠后，在$[0,N-1]$截断）&lt;/p&gt;
&lt;p&gt;保范：$\sum_{n=0}^{N-1}|x[n]|^2=\frac{1}{N}\sum_{k=0}^{N-1}|X[k]|^2$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;补充定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;循环位移：$x[((n-m))_N]R_N[n]$ (移位+截断，$m$为向右平移的位数)&lt;/p&gt;
&lt;p&gt;循环反转：$x[((-n))_N]R_N[n]$ (0不变，其余前后反转)&lt;/p&gt;
&lt;p&gt;共轭偶/奇对称：$x_{e/o}[n] = \frac{1}{2}(x[n]\pm x^{\ast}[((-n))]R_N[n])$ (注意把原来的取反变成了循环反转)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
