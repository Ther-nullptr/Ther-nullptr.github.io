[{"content":"优秀stack站点记录 zhixuan\u0026rsquo;s Blog\n相忘于江湖\nHome\n一笼虾饺有四个\n","date":"2022-06-15T00:24:11+08:00","permalink":"https://ther-nullptr.github.io/posts/awesome_toolkits/websites/","title":"Websites"},{"content":"Bilibili \r\rMusic .dark-theme .aplayer{background:#212121}.dark-theme .aplayer.aplayer-withlist .aplayer-info{border-bottom-color:#5c5c5c}.dark-theme .aplayer.aplayer-fixed .aplayer-list{border-color:#5c5c5c}.dark-theme .aplayer .aplayer-body{background-color:#212121}.dark-theme .aplayer .aplayer-info{border-top-color:#212121}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-title{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-author{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time{color:#eee}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#eee}.dark-theme .aplayer .aplayer-list{background-color:#212121}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb{background-color:#999}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb:hover{background-color:#bbb}.dark-theme .aplayer .aplayer-list li{color:#fff;border-top-color:#666}.dark-theme .aplayer .aplayer-list li:hover{background:#4e4e4e}.dark-theme .aplayer .aplayer-list li.aplayer-list-light{background:#6c6c6c}.dark-theme .aplayer .aplayer-list li .aplayer-list-index{color:#ddd}.dark-theme .aplayer .aplayer-list li .aplayer-list-author{color:#ddd}.dark-theme .aplayer .aplayer-lrc{text-shadow:-1px -1px 0 #666}.dark-theme .aplayer .aplayer-lrc:before{background:-moz-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:-webkit-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:linear-gradient(to bottom, #212121 0%, rgba(33,33,33,0) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#212121', endColorstr='#00212121',GradientType=0 )}.dark-theme .aplayer .aplayer-lrc:after{background:-moz-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:-webkit-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:linear-gradient(to bottom, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#00212121', endColorstr='#cc212121',GradientType=0 )}.dark-theme .aplayer .aplayer-lrc p{color:#fff}.dark-theme .aplayer .aplayer-miniswitcher{background:#484848}.dark-theme .aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#eee}   Youtube   ","date":"2022-06-14T23:12:44+08:00","permalink":"https://ther-nullptr.github.io/posts/cheatsheet/hugo_text/","title":"Hugo Text Snippet"},{"content":"如果说两年以后重新回头审视高考，会给我带来什么，我只想说：决定未来大学生活状态的，从来不是分数或者是一纸录取书，而是升入大学以后面对未知世界的不卑不亢。\n如果说两年来的T大生活教会了我什么深刻的道理，我只能说：对于来自十八线小城的自己来说，面对强者如云的环境，与过去懵懂狂妄的自己和解、即使身负压力也能坚守自己的一些处事原则、在一众万里挑一的灵魂中抉择出自己最想成为的模样（或者说，范式），也许要比学好若干门专业课更加重要也更加困难。\n于我们而言，也许进入大学的第一道难关是“如何面对生活中不确定性的恐惧”。对此，我只希望：无论高考结果如何，希望大家都能在九月份踏进新校园的那一刻自信地说出——我是这里真正的主人，我将在这里勇敢地探索关于自己和生活的一切。\n","date":"2022-06-06T19:37:34+08:00","permalink":"https://ther-nullptr.github.io/posts/small_talk/exam/","title":"高考"},{"content":"多周期CPU 多周期数据通路     R lw or sw beq J     IF PC\u0026lt;=PC+4; IR \u0026lt;=MemInst[PC]; * * *   ID opcode\u0026lt;=IR[31:26]; A\u0026lt;=Reg[IR[25:21]]; B\u0026lt;=Reg[IR[20:16]]; ALUOut\u0026lt;=PC+(signext(IR[15:0]\u0026laquo;2)) * * *   EX ALUOut \u0026lt;= A op B ALUOut\u0026lt;=A+sign-ext(IR[15:0]) if (A=B)PC\u0026lt;=ALUOut PC \u0026lt;= {PC[31:28],IR[25:0],2’b00}   MEM Reg[IR[15:11]]\u0026lt;=ALUOut Lw:MDR\u0026lt;=MemData[ALUOut];Sw:MemData[ALUout] \u0026lt;=B     WB  Reg[IR[20:16]]\u0026lt;=MDR      重点控制信号的周期：\n IRWrite：在Instruction fench阶段被置为1，但在lw的Memory access阶段被置为0，因为在lw的Register writeback阶段，Instruction Register不能再更新，如果更新的话，会被读出的数据覆盖。 MemRead：在Instruction fench阶段被置为1（用于读取指令），在Instruction decode阶段为0，在lw的Memory access阶段被置为1。 MemWrite：默认0，在sw的Memory access阶段被置为1。 ALUSrc1：在Instruction fench阶段为00（PC），在Execution阶段根据实际情况修改。 ALUSrc2：在Instruction fench阶段为01（4），在Instruction decode阶段为11（imm\u0026laquo;2），在Execution阶段根据实际情况修改。 PCWrite：在Instruction fench阶段为1（PC\u0026lt;=PC+4），在Instruction decode阶段为0，此后若执行跳转类指令则被置为1。 PCSource：默认为00（PC\u0026lt;=PC+4），在Execution阶段视情况改变。 IorD：默认0（取指令），在Memory access阶段被置为1。 PCWriteCond：在beq的Execution阶段被置为1。 MemtoReg：默认00。 RegDst：默认00。 RegWrite：默认0，在jal和jalr以及Register writeback中被置为1。 ExtOp：在Instruction decode阶段被置为1，因为需要算跳转地址。 ALUOp：在Instruction fench和Instruction decode均为00，因为需要执行加法操作；R type被置为10，beq被置为01。  多周期异常和中断处理 异常指内部不可预知事件（溢出，同步），中断指外部不可预知事件（I/O，异步）。\n简单起见，假设我们需要处理两种异常：1)未定义指令的执行 2)算术溢出，异常处理程序的入口为0x80000180。\n我们需要添加2个寄存器：\n EPC Register：保存受影响的指令的地址。注意写入EPC的地址应该为PC-4。 Cause Register：记录产生异常事件原因。此处0为未定义指令，1为算术溢出。  4个控制信号：\n EPCWrite：EPC写入使能，在触发异常/中断时被置为1。 CauseWrite：Cause写入使能。 PCSource：增加0x80000180。 IntCause：异常原因选择信号。  异常处理的步骤大致如下：\n  异常检测。通过检测 ALU 的溢出信号，判断是否发生溢出异常。\n  保存现场。在异常程序计数器（Exception Program Counter，EPC）中保存出错的指令地址。\n  跳转到异常处理程序。通过修改程序计数器（PC）的值，使得处理器进入异常处理程序。\n  异常/中断处理程序采取操作，比如可以执行对溢出情况实现定义的一些操作，或者终止程序运行并报告。在异常处理完成后，异常处理程序可以选择终止程序，也可以根据 EPC 存储的指令地址恢复并继续执行程序。\n  ","date":"2022-06-04T11:43:15+08:00","permalink":"https://ther-nullptr.github.io/posts/digital_logic_and_processors/multicycle_cpu/","title":"Multicycle CPU"},{"content":"控制信号常见答疑 About Extop https://stackoverflow.com/questions/55290060/what-does-extend-immediate-to-32-bits-mean-in-mips\nI-type instructions with 16-bit immediates are different.\n addi / addiu immediates are sign-extended (by duplicating the top/sign bit of the immediate to all higher bits). https://en.wikipedia.org/wiki/Two%27s_complement#Sign_extension This allows 2\u0026rsquo;s complement numbers from -2^15 .. +2^15-1 to be encoded. (0xFFFF8000 to 0x00007FFF) ori/andi/xori boolean immediates are zero-extended (by setting all higher bits to zero) This allows unsigned / 2\u0026rsquo;s complement numbers from 0 .. 2^16-1 to be encoded. (0x00000000 to 0x0000FFFF)  For other instructions see this [instruction-set reference](https://web.cse.ohio-state.edu/~crawfis.3/cse675-02/Slides/MIPS Instruction Set.pdf) which breaks down each instruction showing 016 || [I15..0] for zero-extension or [I15]16 || [I15..0] for sign-extension.\nAnd usually you don\u0026rsquo;t want to raise an exception on signed overflow, so normally compilers use addu / addiu even on signed integers. addiu is badly named: it\u0026rsquo;s not \u0026ldquo;for unsigned integers\u0026rdquo;, it\u0026rsquo;s just a wrapping-allowed / never-faulting version of add/addi. It sort of makes sense if you think of C, where signed overflow is undefined behaviour (and thus could use add and raise an exception in that case if the compiler wanted to implement it that way), but unsigned integers have well-defined overflow behaviour: base 2 wraparound.\n可以为X的控制信号  控制数据来源的信号（RegDst，MemtoReg）等，不需要用到时可以为X。 控制是否执行某操作（RegWrite）等，必须为0/1。  ","date":"2022-06-04T10:34:25+08:00","permalink":"https://ther-nullptr.github.io/posts/digital_logic_and_processors/control_signal/","title":"CPU中的控制信号"},{"content":"处理器 处理器架构  普林斯顿架构：存储器同时存储指令和其他数据 哈佛架构：数据存储和指令存储分开  处理器性能 执行时间 = 指令数 x CPI x 时钟周期\n或： $$ CPI = CPI_1\\times p_1+\u0026hellip;+CPI_n\\times p_n $$ 性能提升方法：\n 优化编译技术（减少指令数） 快速电路技术或更为先进的电路结构（减少时钟周期）  寄存器 VS 存储器  寄存器：以编号进行访问，可同时访问不同寄存器。 存储器：以地址进行访问，不可同时访问不同地址，相邻数据的地址相差4字节。  数据单位约定 在32位MIPS中，1 word = 4 bytes = 32 bits，相邻数据的地址相差4字节。\n1 2 3 4 5 6 7 8 9 10 11  #include\u0026lt;stdio.h\u0026gt;int main() { printf(\u0026#34;%d\\n\u0026#34;,sizeof(int)); // 4  printf(\u0026#34;%d\\n\u0026#34;,sizeof(char)); // 1  printf(\u0026#34;%d\\n\u0026#34;,sizeof(unsigned int)); // 4  printf(\u0026#34;%d\\n\u0026#34;,sizeof(long int)); // 8  printf(\u0026#34;%d\\n\u0026#34;,sizeof(long long int)); // 8  printf(\u0026#34;%d\\n\u0026#34;,sizeof(float)); // 4  printf(\u0026#34;%d\\n\u0026#34;,sizeof(double)); // 8 }   MIPS汇编指令 汇编优化相关问题   算数\u0026amp;逻辑指令11bit冗余能否利用起来？\n额外11bit用于移位量\u0026amp;功能码。好处：寄存器算术操作只占用一种操作码，指令集可以使用其他操作码支持更多种指令。\n  分支可能的地址范围有32位，如何用16bit表示？\n采用基址+偏移地址的寻址方式。\n addr \u0026laquo; 2：将直接地址转换为字节地址。\n   带立即数的分支指令立即数如何编码？\nMIPS没有带立即数的分支指令，使用比较指令(slti、sltiu等）+ 分支指令组合实现。\n  访存可能的地址有32位，如何用21bit表示？\n采用基址+偏移地址的寻址方式进行访存（5 bit：寄存器 16 bit：立即数）。\n  跳转可能的地址有32位，如何用26bit表示？\nj小范围，jr大范围。\n  寻址方式  寄存器寻址：找到对应的寄存器，从寄存器中取数/写数。如：R type(add)。 立即数寻址：指令中的立即数可以被直接使用。如：I type(addi) 基址寻址：目标地址=基址（存储于寄存器中）+ 立即数。如：lw,sw PC相对寻址：PC+立即数。如：beq 伪直接寻址：固定PC的高4位不变。如：j  MIPS过程调用   Preserved（子程序不改变这些寄存器的数据，如果子程序要用，需要子程序维护好）\n  Not Preserved（子程序可以改变这些寄存器的数据，如果主程序要用，需要主程序维护好）\n  考虑以下汇编：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  fact: addi $sp, $sp, -8 sw $ra, 4($sp) sw $a0, 0($sp) slti $t0, $a0, 1 beq $t0, $zero, L1 addi $v0, $zero, 1 addi $sp, $sp, 8 jr $ra L1: addi $a0, $a0, -1 jal fact lw $a0, 0($sp) lw $ra, 4($sp) addi $sp, $sp, 8 mul $v0, $a0, $v0 jr $ra   对应：\n1 2 3 4 5  int fact(int n) { if (n \u0026lt; 1) return 1; else return (n * fact(n-1)); }   ","date":"2022-06-03T00:00:00Z","permalink":"https://ther-nullptr.github.io/posts/digital_logic_and_processors/assembly/","title":"MIPS汇编语言"},{"content":"谐振腔和波导 谐振腔 $$ \\omega_{mnp} = \\frac{1}{\\sqrt{\\epsilon\\mu}}\\sqrt{(\\frac{m\\pi}{a})^2+(\\frac{n\\pi}{b})^2+(\\frac{p\\pi}{l})^2} $$\n其中$m,n,p$最多一个为0。\n波导 假设电磁场沿$z$方向传播，则电磁波可以写作： $$ E = E(x,y)e^{i(\\beta z-\\omega t)} \\ H = H(x,y)e^{i(\\beta z-\\omega t)} $$ 边界条件满足： $$ \\hat n\\times E|_S = 0 $$ 横向波矢和纵向波矢分别满足： $$ k_c^2=k^2_x+k^2_y \\ \\beta = \\sqrt{k^2-k_c^2} = \\frac{1}{c}\\sqrt{\\omega^2-\\omega^2_c} $$ 只有当$\\beta$为实数时，波才能传播。$\\omega_c=ck_c=c\\sqrt{(\\frac{\\pi}{a})^2+(\\frac{\\pi}{b})^2}$为截止频率。\n    TM TE TEM     条件 $E_z=0$ $H_z=0$ $E_z=0,H_z=0$（波导横截面应当能够支持二维静电场）   $k_c$ $(\\frac{m\\pi}{a})^2+(\\frac{n\\pi}{b})^2$ $(m\u0026gt;0,n\u0026gt;0)$ $(\\frac{m\\pi}{a})^2+(\\frac{n\\pi}{b})^2$ $(m\u0026gt;=0,n\u0026gt;=0,mn!=0)$ $0$   基模 $TM_{11}$ $TE_{01},TE_{10}$    相速度$v_p$ $\\frac{c}{\\sqrt{1-(\\frac{\\omega_c}{\\omega})^2}}$ $\\frac{c}{\\sqrt{1-(\\frac{\\omega_c}{\\omega})^2}}$ $c$   群速度$v_g$ ${c}{\\sqrt{1-(\\frac{\\omega_c}{\\omega})^2}}$ ${c}{\\sqrt{1-(\\frac{\\omega_c}{\\omega})^2}}$ $c$   色散 有 有 无    ","date":"2022-06-01T00:00:00Z","permalink":"https://ther-nullptr.github.io/posts/electromagnetic_fields_and_waves/electromagnetic_fields_and_waves05/","title":"谐振腔和波导"},{"content":"Memory RAM random access是指该存储器的所有内容都可以被读取和写入，且与时间和位置无关。\n    SRAM DRAM     中文名 静态随机访问存储器 动态随机访问存储器   速度 快 慢（需要读取内容后刷新、定期刷新）   结构 由MOS管组成的锁存器（6T） 由MOS管和电容实现（1T1C）   容量 小 大   应用 缓存 主存   访问时间 1~10ns 10~100ns    常见问答：\n  DRAM电容量C的权衡：\n 大电容容量C的优势：提供更长的数据保持时间 大电容容量C的劣势：工艺实现难度加大，密度降低    RAS和CAS均为低电平有效，其中CAS可以作为输出使能信号。\n  cache 原理 存储系统满足局部性原理：\n 时间局部性——最近的将来要用到的信息很可能就是现在正在使用的信息。主要由循环造成。 空间局部性——最近的将来要用到的信息很可能与现在正在使用的信息在空间上是邻近的。主要由顺序执行和数据的聚集存放造成。  cache的访问时间 一级cache（$r$为访问时间比，$e$为访问效率）： $$ T_A=T_{A1}+(1-H)T_{A2}\\ r=\\frac{T_{A2}}{T_{A1}}\\ e=\\frac{T_{A1}}{T_A} = \\frac{1}{1+(1-H)r} $$ 二级cache： $$ T_A=T_{A1}+(1-H_1)[T_{A2}+(1-H_2)T_{A3}] $$\ncache的基本结构 需要解决两个问题：\n 数据是否在cache中？ 如果在cache中，如何找到数据？  首先需要指出主存存储和cache存储的格式：\n 主存存储 主存块号+行内地址 cache存储 （标签）+cache行号+行内地址  每个主存块和每个cache行储存的数据相同，两者的数据传输以块/行为单位。其中每个cache行的组成如下：数据+标签+有效位。\ncache地址映像方式 三种地址映像方式：\n 直接映像: 主存块只可能在cache的某个特定行中 全相联映像: 主存块可以放在cache的任意行中 组相联映像: 主存块可以放在cache中的n个特定行中，n一般在2到8之间，将这n个行称为一个Cache组。  直接映像 主存标号$i$，cache标号$j$满足以下关系： $$ j = i \\mod N \\ i = j+Nk(k=0,1..) $$ 可以直接写成AB、AC，但是只适用于直接映像。\n对于32位内存系统，假设cache每行有$x$byte，cache共$y$行，则低$\\log_2x$位为块内地址，中间$\\log_2y$位为cache行号，剩下$(32-\\log_2x-\\log_2y)$位为主存标签。\n在这种情况下，由于每行cache的数据有$4x$bit，还有1 bit有效位，所以cache的实际总位数为： $$ y[4x+1+(32-\\log_2x-\\log_2y)] $$ 注意到cache每行至少储存1个word，所以$x$一定是4的倍数，地址的后两位一定是0。载入cache数据时仍然以word为单位进行载入。\n全相联映像 对于32位内存系统，假设cache每行有$x$byte，则低$\\log_2x$位为块内地址，剩下$(32-\\log_2x)$位作为主存标签。\n组相联映像 对于32位内存系统，假设cache每行有$x$byte，cache共$y$行，$z$路组相连，则低$\\log_2x$位为块内地址，中间$\\log_2(\\frac{y}{z})$位作为cache组号，剩下$(32-\\log_2x-\\log_2(\\frac{y}{z}))$位作为主存标签。\n直接映像为$z=1$，全相联映像为$z=y$。\ncache数据替换 每个cache行有一个有效标志位v，表明“这一行的主存数据副本是有效的”。v=1时cache行才能被命中。\n 复位、刚上电或清空cache时，所有行的v=0。 cache行刚刚被替换时，对应行的v=1。  当访问一个地址发现其不在cache中时，复制主存块到缓存的行中；当主存块对应的cache行均被占用（有效位为1）时，需要选择一个cache行进行替换。\n 直接映像 只有一行可以被替换，不用选 组相联/全相联  随机法(Random)：在cache中随机选择一个主存块 先进先出法(FIFO, First-In First-Out)：选择一个集合中最先进入cache中的主存块(即存在时间最长的块)，类似于数据结构中的队列。 最近最少使用法(LRU, Least recently used)：替换cache中最近最少被使用的主存块    cache数据更新 当需要向层次结构存储器写入数据时，需要考虑将数据存入cache还是主存的问题。\nwrite through 指高速缓存和主存都写入。\nwrite back 先将数据写入Cache中，之后在该块要被替换出Cache时才将数据写到主存储器中。\n在cache中会添加一个脏位（dirty bit）。脏位为1意味着cache里面的数据是更新后的，而主存储器里面的数据是过时的。不一致的数据在被替换时一定要写回主存中。\n    Write Through Write Back      既写到cache同时也更新主存储器 只写cache，当数据被替换出cache时才将写回到主存储器    慢 快   被替换是否会导致写操作 No Yes   重复的写操作是否重复写主存 Yes No    cache性能评估  强迫性缺失：第一次访问主存储器中的某一个数据块，只能先从主存储器将数据加载到cache中。 容量缺失：由于cache容纳不了程序所需的所有主存块而引起的缺失。 冲突缺失：在组相联或者直接映像中，多个的主存块竞争同一个cache组时引起的缺失，也称碰撞缺失。  ","date":"2022-05-31T19:22:17+08:00","permalink":"https://ther-nullptr.github.io/posts/digital_logic_and_processors/memory/","title":"Cache"},{"content":"流水线计算公式 $n$为指令数，$k$为流水线级数，级间延时$\\Delta t$。\n实际吞吐率（单位时间内流水线处理的指令数）： $$ TP=\\frac{n}{(k+n-1)\\Delta t} $$ 最大吞吐率： $$ TP_{max} = \\frac{1}{\\Delta t} $$ 实际加速比： $$ S = \\frac{kn}{k+n-1} $$ 最大加速比： $$ S_{max}=k $$\n流水线中控制信号的流动 控制信号在IF之后的ID/RF阶段产生。\n ID/RF：Extop EX：ALUSrc、ALUOp、RegDst？？ MEM：MemWrite、Branch WB：MemToReg、RegWrite  流水线中的冒险 首先列出未冒险时流水线CPU在各步中进行的操作：\n    R lw or sw beq J     IF PC\u0026lt;=PC+4; IR \u0026lt;=MemInst[PC] * * *   ID opcode\u0026lt;=IR[31:26]; A\u0026lt;=Reg[IR[25:21]]; B\u0026lt;=Reg[IR[20:16]]; ALUOut\u0026lt;=PC+(signext(IR[15:0]\u0026lt;\u0026lt;2)) * * PC \u0026lt;= {PC[31:28],IR[25:0],2’b00}   EX ALUOut \u0026lt;= A op B ALUOut\u0026lt;=A+sign-ext(IR[15:0]) if (A=B)PC\u0026lt;=ALUOut    MEM Reg[IR[15:11]]\u0026lt;=ALUOut Lw:MDR\u0026lt;=MemData[ALUOut];Sw:MemData[ALUout] \u0026lt;=B     WB  Reg[IR[20:16]] \u0026lt;=MDR      结构冒险 problem 流水线处理器中直接取消了InstMemory和DataMemory混用的做法，因此不必担心存储器访问的冲突。\n ALU使用冲突。考虑下列指令：  1 2  add $t0,$t1,$t2 beq $a0,$a1,label   当add指令执行完EX时，beq指令执行完ID，ALU产生冲突的结果。\n寄存器堆写入冲突。考虑下列指令：  1 2  lw $a0,0($t0) add $t0,$t1,$t2   当add指令执行完MEM时，lw指令执行完WB，寄存器写入数据产生冲突的结果。\nsolution   ALU使用冲突：\nbeq指令原先需要进行两次计算操作：1)在ID阶段计算分支地址 2)在EX阶段作差比较，更新PC。\n现在需要将计算分支地址移动到EX阶段，把ALUOut计算分解为ALU和PCAdd（一个周期进行两次计算），在MEM阶段更新PC。\n  寄存器堆写入冲突：\n将R型的Write back移动到WB阶段。\n  更新后的操作如下：\n    R lw or sw beq J     IF PC\u0026lt;=PC+4; IR \u0026lt;=MemInst[PC]; * * *   ID opcode\u0026lt;=IR[31:26]; A\u0026lt;=Reg[IR[25:21]]; B\u0026lt;=Reg[IR[20:16]]; * * PC \u0026lt;= {PC[31:28],IR[25:0],2’b00}   EX ALUOut \u0026lt;= A op B ALUOut\u0026lt;=A+sign-ext(IR[15:0]) ALUOut\u0026lt;=A-B; PCAdd\u0026lt;=PC+(signext(IR[15:0]\u0026lt;\u0026lt;2))    MEM  Lw:MDR\u0026lt;=MemData[ALUOut]; Sw:MemData[ALUout] \u0026lt;=B if(Zero) PC\u0026lt;=PCAdd    WB Reg[IR[15:11]]\u0026lt;=ALUOut Reg[IR[20:16]] \u0026lt;=MDR      数据冒险 无法得到所需的数据而导致不能执行后续指令。数据冒险面对的是操作数是否已经更新的问题。\n    R lw or sw beq J     IF PC\u0026lt;=PC+4; IR \u0026lt;=MemInst[PC]; * * *   ID opcode\u0026lt;=IR[31:26]; A\u0026lt;=Reg[IR[25:21]]; B\u0026lt;=Reg[IR[20:16]]; * * PC \u0026lt;= {PC[31:28],IR[25:0],2’b00}   EX ALUOut \u0026lt;= A op B ALUOut\u0026lt;=A+sign-ext(IR[15:0]) ALUOut\u0026lt;=A-B; PCAdd\u0026lt;=PC+(signext(IR[15:0]\u0026lt;\u0026lt;2))    MEM  Lw:MDR\u0026lt;=MemData[ALUOut]; Sw:MemData[ALUout] \u0026lt;=B if(Zero) PC\u0026lt;=PCAdd    WB Reg[IR[15:11]]\u0026lt;= ALUOut Reg[IR[20:16]] \u0026lt;= MDR      Read after write data hazards(RAW) 硬件优化 考虑以下指令：\n1 2  add $r1,$r2,$r3 add $r2,$r1,$r3   before:\n               add $r1,$r2,$r3 IF ID EX MEM WB     nop          nop          add $r2,$r1,$r3    IF ID EX MEM    注意到第一条指令在WB阶段将结果写回寄存器（注意已经不是MEM阶段了！），而第二条指令在ID阶段读取寄存器。可以不修改数据通路，但是需要保证寄存器先写后读（否则需要阻塞3个周期）。\n 实现方法：\n 流水线上的寄存器在上升沿时写入，在时钟的下降沿写入寄存器堆。 比较写入地址和读取地址，当两者相同且要写入寄存器堆时，读取端的数据直接选择为写入端的数据而不从寄存器堆中读取。   Forward(转发) 考虑以下指令：\n1 2 3  add $r1,$r2,$r3 sub $r4,$r1,$r5 and $r6,$r1,$r7   after:\n               add $r1,$r2,$r3 IF ID EX MEM WB     sub $r4,$r1,$r5  IF ID EX MEM WB    and $r6,$r1,$r7   IF ID EX MEM WB    指令1在WB阶段写入r1寄存器，但指令2、3在ID阶段就要用到r1。不过实际上在指令的EX阶段该数值就已经计算完毕，需要在指令2、3的EX阶段用到。\n对于指令2，EX的操作数来源于EX/MEM.ALUOut；对于指令3，EX的操作数来源于MEM/WB.ALUOut；\nLoad-use data hazard(lw-calculate type) Forward 考虑以下指令：\n1 2 3  lw $r1,100($r2) sub $r4,$r1,$r5 and $r6,$r1,$r7   before:\n               lw $r1,100($r2) IF ID EX MEM WB     nop          nop          sub $r4,$r1,$r5    IF ID EX MEM   and $r6,$r1,$r7     IF ID EX    after:\n               lw $r1,100($r2) IF ID EX MEM WB               sub $r4,$r1,$r5   IF ID EX MEM WB   and $r6,$r1,$r7    IF ID EX MEM    lw后r1的新值在MEM阶段后产生，随后被转发至MDR（注意此处的MDR与多周期中的MDR不同，此处的MDR应该是MEM/WB的一部分）中，在下个周期供sub的EX阶段使用。\n上述方法必须使用一次stall，可以重排指令，在lw之后运行一条不依赖r1寄存器的指令。\n更新后的操作如下：\n    R lw or sw beq J     IF PC\u0026lt;=PC+4; IR \u0026lt;=MemInst[PC]; * * *   ID opcode\u0026lt;=IR[31:26]; A\u0026lt;=Reg[IR[25:21]]; B\u0026lt;=Reg[IR[20:16]]; * * PC \u0026lt;= {PC[31:28],IR[25:0],2’b00}   EX ALUOut \u0026lt;= A op B; (Register,EX/MEM.ALUOut,MEM/WB.ALUOut,MDR) ALUOut\u0026lt;=A+sign-ext(IR[15:0]); (Register,EX/MEM.ALUOut,MEM/WB.ALUOut,MDR) ALUOut\u0026lt;=A-B; PCAdd\u0026lt;=PC+(signext(IR[15:0]\u0026laquo;2))    MEM  Lw:MDR\u0026lt;=MemData[ALUOut]; Sw:MemData[ALUout] \u0026lt;=B if(Zero) PC\u0026lt;=PCAdd    WB Reg[IR[15:11]]\u0026lt;=ALUOut Reg[IR[20:16]] \u0026lt;=MDR      Load-use data hazard(lw-sw type) 考虑以下指令：\n1 2  lw $a0,10($a1) sw $a0,10($a2)   before\n               lw $a0,10($a1) IF ID EX MEM WB     nop          sw $a0,10($a2)   IF ID EX MEM WB    after\n               lw $a0,10($a1) IF ID EX MEM WB     sw $a0,10($a2)  IF ID EX MEM WB     lw在MEM阶段结束后更新a0的值，此时可以直接转发给sw，以供在下一时钟周期存入存储器。\n 注意与以下情景做区分：\n1 2  lw $t4, 0($t0) sw $t0, 0($t4)   这就不是lw-sw type了，解决方案见lw-calculate type。\n 控制冒险 取到的指令可能不是所需要的，导致指令不能在预定的时钟周期内执行。控制冒险面对的是下一条指令的PC是多少的问题。\n    R lw or sw beq J     IF PC\u0026lt;=PC+4; IR \u0026lt;=MemInst[PC]; * * *   ID opcode\u0026lt;=IR[31:26]; A\u0026lt;=Reg[IR[25:21]]; B\u0026lt;=Reg[IR[20:16]]; * * PC \u0026lt;= {PC[31:28],IR[25:0],2’b00}   EX ALUOut \u0026lt;= A op B; (Register,EX/MEM.ALUOut,MEM/WB.ALUOut,MDR) ALUOut\u0026lt;=A+sign-ext(IR[15:0]); (Register,EX/MEM.ALUOut,MEM/WB.ALUOut,MDR) ALUOut\u0026lt;=A-B; PCAdd\u0026lt;=PC+(signext(IR[15:0]\u0026laquo;2))    MEM  Lw:MDR\u0026lt;=MemData[ALUOut]; Sw:MemData[ALUout] \u0026lt;=B(B,MEM/WB.MemReadData) if(Zero) PC\u0026lt;=PCAdd    WB Reg[IR[15:11]]\u0026lt;=ALUOut Reg[IR[20:16]] \u0026lt;=MDR      beq hazard 考虑如下指令：\n1 2  beq $t1,$t2,0x10 add $a3,$a2,$a1   before:\n               beq $t1,$t2,0x10 IF ID EX MEM WB     nop          nop          nop          add $a3,$a2,$a1     IF ID EX    beq在MEM阶段才执行跳转，在WB阶段将目标地址写入PC，写入PC后下一条指令在IF阶段取用PC，默认情况下需要stall 3个周期，否则下一条指令执行可能会发生错误。\n但实际上判断是否需要跳转的所有条件在EX阶段执行后就可以全部掌握，可以将ALUOut转发的结果转发至IF，这样只需要stall 2个周期。\nafter(v1):\n               beq $t1,$t2,0x10 IF ID EX MEM WB     nop          nop          add $a3,$a2,$a1    IF ID EX MEM    实际上，也可以将分支判断移动到ID阶段：\n    R lw or sw beq J     IF PC\u0026lt;=PC+4; IR \u0026lt;=MemInst[PC]; * * *   ID opcode\u0026lt;=IR[31:26]; A\u0026lt;=Reg[IR[25:21]]; B\u0026lt;=Reg[IR[20:16]]; * if(A==B) PC\u0026lt;=PC+(signext(IR[15:0]\u0026laquo;2)) PC \u0026lt;= {PC[31:28],IR[25:0],2’b00}   EX ALUOut \u0026lt;= A op B; (Register,EX/MEM.ALUOut,MEM/WB.ALUOut,MDR) ALUOut\u0026lt;=A+sign-ext(IR[15:0]); (Register,EX/MEM.ALUOut,MEM/WB.ALUOut,MDR)     MEM  Lw:MDR\u0026lt;=MemData[ALUOut]; Sw:MemData[ALUout] \u0026lt;=B(B,MEM/WB.MemReadData)     WB Reg[IR[15:11]] \u0026lt;=ALUOut Reg[IR[20:16]] \u0026lt;=MDR      但是可能会带来一些新的问题：\n  在EX阶段我们使用ALU比较两个操作数是否相等，使用PCAdder计算分支地址，所以现在需要在ID阶段额外引入比较器和PC计算器。注意到数据可能来自旁路。\n  在ID阶段判断beq，等价于将beq的EX阶段提前进行，这样就会产生3种情况：\n beq前1条指令为R type指令，stall 1个周期（1EX-\u0026gt;2ID）                 add $a3,$a2,$a1 IF ID EX MEM WB     nop          beq $t0,$a3,0x10   IF ID EX MEM WB     beq前1条指令为lw指令，stall 2个周期（1MEM-\u0026gt;2ID）                 lw $a3,0($a2) IF ID EX MEM WB     nop          nop          beq $t0,$a3,0x10    IF ID EX MEM     beq前2条指令为lw指令，stall 1个周期（1MEM-\u0026gt;3ID）                 lw $a3,0($a2) IF ID EX MEM WB     add $t3,$t2,$t1  IF ID EX MEM WB    nop          beq $t0,$a3,0x10    IF ID EX MEM      延迟槽技术 即使将beq的判断前移到ID阶段，在beq之后也必须stall一个周期。可以在stall周期内执行一些必定要执行的指令，这就是延迟槽技术。\n无特殊说明使用延迟槽技术的情况下，即使beq后面的指令必定执行，也必须要stall。\n预测  静态预测：总预测分支不执行或者执行，错误则撤销指令。若预测失误会导致不必要的流水线重置。 动态预测：在IF阶段进行分支预测缓存，可以用PC（或者PC的低位地址）为索引，记录过去是否跳转。   实现过程：\n  clock 1(IF):\n在第一次执行beq指令时，建立BHT和BTB，并存下1)指令地址 2)最终是否跳转 3)跳转目标地址；在之后执行beq指令时，查询指令地址是否在BHT和BTB中，若不存在，建立新的条目；若存在，根据历史记录判断是否跳转；若跳转，取出目标地址作为下一条指令的IF地址。\n  clock 2(ID):\n根据预测目标地址取出指令。\n   j hazard 考虑如下指令：\n1 2  j label add $t3,$t1,$t2                  j label IF ID EX MEM WB     stall          add $a3,$a2,$a1   IF ID EX MEM WB    j在ID阶段完成目标地址的计算，需要stall一个周期。\n**但这种做法是错误的！**因为流水线直到ID阶段才能知道取出的指令为j，而此时下一条指令只能已经从指令存储中取出，只能延后执行，而不能不执行。\n于是我们不进行硬件阻塞。j指令执行完ID阶段时，可以判断出执行的是j指令，此时下一条指令（实际上不会执行）也执行完IF阶段，但之后的步骤都会被flush掉，ID阶段生成的新地址也被用于载入下下一条指令。从时间上看还是stall了一个周期。\n               j label  IF ID EX MEM WB     add $a3,$a2,$a1(next)  IF x x x x    add $a3,$a2,$a1(jump target)   IF ID EX MEM WB     转发方式总结\n 数据冒险   A2-\u0026gt;B1 R型的前前条为R型 A3-\u0026gt;B1 R型的前条为R型 A4-\u0026gt;B2 lw-sw转发  此外，A4-\u0026gt;B1无法转发，对应于lw-R型必须stall一个周期。\n 控制冒险(beq)   A2-\u0026gt;B0 beq的前前条为R型，可以使用转发解决 A3-\u0026gt;B0 beq的前前条为lw，需要stall 2个周期 A4-\u0026gt;B0 beq的前条为R型，需要stall 1个周期 A5-\u0026gt;B0 beq的前条为lw型，需要stall 2个周期  注意在转发时不能跨时钟周期转发，比如上上条指令ALU的结果输出不能直接转发，必须要经过MEM/WB寄存器。\n 考虑冒险的数据通路设计 Forward Unit R-R type(1) 若R型的前条为R型，则可能需要从EX_MEM寄存器中转发至EX阶段：\n1 2 3 4 5 6 7 8  if (EX_MEM.RegWrite // 需要写入寄存器  and (EX_MEM.RegWrAddr != 0) // 不能使用0寄存器  and (EX_MEM.RegWrAddr == ID_EX.RegisterRs)) // 触发转发条件（如果不使用转发就会冒险）  ForwardA = 10; if (EX_MEM.RegWrite and (EX_MEM.RegWrAddr != 0) and (EX_MEM.RegWrAddr == ID_EX.RegisterRt)) ForwardB = 10;   R-R type(2) 若R型的前前条为R型，则可能需要从MEM_WB寄存器中转发至EX阶段：\n1 2 3 4 5 6 7 8 9 10 11 12  if (MEM_WB.RegWrite and (MEM_WB.RegWrAddr != 0) and (MEM_WB.RegWrAddr == ID_EX.RegisterRs) and (EX_MEM.RegWrAddr != ID_EX.RegisterRs || ~ EX_MEM.RegWrite) // 从前条转发的条件不满足 ) ForwardA = 01; if (MEM_WB.RegWrite and (MEM_WB.RegWrAddr != 0) and (MEM_WB.RegWrAddr == ID_EX.RegisterRt) and (EX_MEM.RegWrAddr != ID_EX.RegisterRt || ~ EX_MEM.RegWrite) // 从前条转发的条件不满足 ) ForwardB = 01;   最后一个判断条件是为了避免以下情况（前两条指令都是以关联寄存器为目的寄存器的时候，需要转发最新的数据，其数据来源是前一条，而不是前前条）：\n1 2 3  add $1,$1,$2 add $1,$1,$3 add $1,$1,$4   综上可知，EX阶段的forward单元可以描述为（以操作数1为例）：\n1 2 3 4 5 6 7 8  always @(*) begin case(ForwardA) 00:ALU_op1 \u0026lt;= ID_EX.op1; 01:ALU_op1 \u0026lt;= MEM_WB.wb_res; 10:ALU_op1 \u0026lt;= EX_MEM.alu_res; default:ALU_op1 \u0026lt;= ID_EX.op1; endcase end   lw-sw type 若sw的前条为lw，则可能需要从MEM/WB寄存器中转发至MEM阶段：\n1 2 3 4 5 6  if(EX_MEM.RegWrAddr != 0 // 不能使用0寄存器  and EX_MEM.MemWrite // 需要写入存储器(sw)  and MEM_WB.MemRead // 需要读取存储器(lw)  and EX_MEM.RegWrAddr == MEM_WB.RegWrAddr // 转发源和转发目标的寄存器编号一致 ) ForwardA = 1;   综上可知，MEM阶段的forward单元可以描述为：\n1 2 3 4 5 6  always @(*) begin case(Forward) 0:Mem_Write_Data \u0026lt;= EX_MEM.op2; 1:Mem_Write_Data \u0026lt;= MEM_WB.Mem_Read_Data; endcase end   beq 若beq的前前一条指令为R type，则需要将EX_MEM中的ALU计算结果转发至ID阶段：\n1 2 3 4  if(EX_MEM.RegWrite // 需要写入寄存器  and EX_MEM.RegisterRd == IF_ID.RegisterRs // 需要用到寄存器中的结果  ) Forward = 1;   综上可知，ID阶段的forward单元可以描述为：\n1 2 3 4 5 6  always @(*) begin case(Forward) 0:compare_op1 \u0026lt;= regA; 1:compare_op1 \u0026lt;= EX_MEM.alu_res; endcase end   Hazard Unit lw-R type 1 2 3 4  if (ID/EX.MemRead // 是否为load指令  and ((ID/EX.RegisterRd == IF/ID.RegisterRs) or (ID/EX.RegisterRd == IF/ID.RegisterRt)) ) // EX级的装载指令的目的寄存器是否与在ID级指令的某一个源寄存器相匹配（可能会发生冒险）  stall = 5\u0026#39;b11000; // stall IF and ID   beq 1 2 3 4 5  if(ID.branch // 分支指令  and ((ID_EX.RegWrite and (ID_EX.RegisterRd == IF_ID.RegisterRs or ID_EX.RegisterRd == IF_ID.RegisterRt))) // R type  and ((EX_MEM.MemRead and (EX_MEM.RegisterRd == IF_ID.RegisterRs or EX_MEM.RegisterRd == IF_ID.RegisterRt))) // lw  ) stall = 5\u0026#39;b11000; // stall IF and ID    当 beq 前一条指令为 lw 指令时，我们阻塞流水线一个周期，在 lw 和 beq 中间插入一个气泡。此时这一情况自动退化为前前一条指令为 lw 的情况，会被上述逻辑再次处理，因此最终还是会完成 2 个周期的阻塞。\n Flush Unit 使用flush[i]清除第i级流水线上执行的指令（对应4级流水寄存器以及最终写回的寄存器堆）：\n1 2 3  if(flush[i]) begin stage_reg[i] \u0026lt;= 0; end   流水线CPU异常处理 假设有3种异常：badop，IRQ（外部中断），ALUExp。\nException被放置在EX阶段，因此badop要经过一次ID/EX寄存器。\n触发异常时，该单元会flush掉当前指令的EX/MEM寄存器，下条指令的ID/EX寄存器，下下条指令的IF/ID寄存器。（注意flush由hazard和exception单元共同控制）\n扩展技术 指令级并行 超级流水线 用于缩短时钟周期。\n多发射 用于降低CPI。\n  超长指令字 静态决定让哪些指令同时执行（在编译阶段由编译器决定）。\n  超标量 动态决定哪些指令同时执行 （在运行时由硬件决定）。\n IOI-IOC,IOI-OOC,OOI-OOC\n   线程级并行 超线程 多核处理器 $a$为并行部分的比例，$n$为并行部分的加速比。 $$ S=\\frac{1}{(1-a)+\\frac{a}{n}} $$\n异构计算 单指令流多数据流，具有更大的并行度，设计相对比较简单。\n","date":"2022-05-31T00:00:00Z","permalink":"https://ther-nullptr.github.io/posts/digital_logic_and_processors/pipeline_cpu/","title":"Pipeline CPU"},{"content":"导体中电磁场的传播 自由电荷 根据电荷守恒定律和Maxwell方程第3式，可得： $$ \\rho = \\rho_0e^{-\\frac{\\sigma}{\\epsilon}t},\\tau=\\frac{\\epsilon}{\\sigma} $$ 良导体（即$\\rho$衰减很快）满足： $$ \\frac{\\sigma}{\\epsilon\\omega}\u0026raquo;1 $$\n电磁波 对比介质中和导体中的Maxwell方程组，可以发现导体中多了传导电流项$\\sigma E$。为使得两者形式一致，引入复电容率： $$ \\epsilon^{\\prime} = \\epsilon+i\\frac{\\sigma}{\\omega} $$ 此时： $$ k=\\omega\\sqrt{\\mu\\epsilon^{\\prime}}=\\omega\\sqrt{\\mu(\\epsilon+i\\frac{\\sigma}{\\omega})} $$ 设$k=\\beta+i\\alpha$，下考虑垂直入射（入射方向为$z$轴）的情形，$E$满足： $$ E = E_0e^{-\\alpha z}e^{i(\\beta z-\\omega t)} $$ 在良导体条件下： $$ \\alpha \\approx \\beta \\approx \\sqrt\\frac{\\omega\\mu\\sigma}{2} $$ 定义强度降为表面的$e^{-1}$时的深度为穿透深度： $$ \\delta = \\frac{1}{\\alpha}=\\sqrt\\frac{2}{\\omega\\mu\\sigma} $$ 还可求出磁场： $$ H = \\sqrt\\frac{\\sigma}{\\omega\\mu}e^{i\\frac{\\pi}{4}}\\hat e_n\\times E $$ 根据下式可以看出，磁场能量占据主导： $$ \\frac{\u0026lt;w_e\u0026gt;}{\u0026lt;w_m\u0026gt;} = \\frac{\\frac{1}{4}\\epsilon|E_0|^2}{\\frac{1}{4}\\mu|H_0|^2}=\\frac{\\omega \\epsilon}{\\sigma}\u0026laquo;1 $$ 下考虑反射系数。边界条件为： $$ E+E^{\\prime}=E^{\\prime\\prime}\\ H-H^{\\prime}=H^{\\prime\\prime}\\quad(E-E^{\\prime}=\\sqrt\\frac{\\sigma}{2\\omega\\epsilon_0}(1+i)E^{\\prime\\prime}) $$ 幅度比： $$ \\frac{E^{\\prime}}{E} = \\frac{\\sqrt\\frac{2\\omega\\epsilon_0}{\\sigma}-1-i}{\\sqrt\\frac{2\\omega\\epsilon_0}{\\sigma}+1+i} $$\n反射系数： $$ R=|\\frac{E^{\\prime}}{E}|^2=1-2\\sqrt\\frac{2\\omega\\epsilon_0}{\\sigma} $$\n当电磁波照射到良导体表面时，有部分电磁场能量转换为导体的焦耳热。\n导体平均损耗功率密度$P_{\\sigma}$： $$ P_\\sigma = \\frac{1}{2}E_{0t}\\cdot J_\\sigma^\\star = \\frac{1}{2}\\sigma|E_{0}|^2e^{-2\\alpha z} $$\n表面电阻$R_s$： $$ R_s=\\frac{1}{\\sigma\\delta} $$ 单位表面焦耳热总功率$P_d$： $$ P_d = \\frac{1}{2}|J_s|^2R_s $$ 表面电流密度$J_s$： $$ J_s=\\frac{\\sigma E_0}{\\sqrt{\\alpha^2+\\beta^2}}e^{i\\arctan(\\frac{\\beta}{\\alpha})} $$\n","date":"2022-05-30T00:00:00Z","permalink":"https://ther-nullptr.github.io/posts/electromagnetic_fields_and_waves/electromagnetic_fields_and_waves04/","title":"导体中电磁场的传播"},{"content":"平面电磁场 平面波 在计算电磁场的传播时，我们默认$\\rho=0$，$J=0$。\n对Maxwell方程第一式求旋度，整理可得： $$ \\nabla^2 E - \\mu\\epsilon\\frac{\\partial^2E}{\\partial t^2} = 0 $$ 也可以在频域中表示： $$ \\nabla^2 E +\\omega^2\\mu\\epsilon E = 0 $$ 令$k^2=\\omega^2\\mu\\epsilon$，上式即为Helmholtz方程。\n但Helmholtz方程的解不一定为Maxwell方程的解，所以有必要进行一定的约束： $$ \\nabla^2E+k^2E=0 \\ \\nabla \\cdot E = 0\\ H = \\frac{1}{i\\omega\\mu}\\nabla\\times E $$ 上式即为完整Helmholtz方程组。\n在一维条件下，Helmholtz的一个解为（$x$表示电磁波沿$x$轴方向传播）： $$ E=E(x)=E_0e^{ikx} $$ 全表示式为： $$ E(x,t)=E_0e^{i(kx-\\omega t)} $$ 其中等相位面$\\theta=kx-\\omega t$\n由于： $$ \\nabla \\cdot E = \\nabla \\cdot (E_0e^{ikx}) = ikE_0e^{ikx} \\cdot \\hat e_x = 0 $$ 所以$E_x = 0$。\n再将$E$代入计算$H$： $$ H=\\frac{1}{i\\omega \\mu}\\nabla\\times(E_0e^{ikx}) = \\frac{1}{i\\omega \\mu}ik\\times E_0 e^{ikx}=\\hat k\\times\\frac{E_0}{\\eta}e^{ikx} $$ $B$： $$ B = \\sqrt{\\mu\\epsilon}\\hat k \\times E=\\frac{1}{\\omega}k\\times E $$ 根据上式也可以推导出电磁波的一些基本量：\n  相速度 $v_p=\\frac{\\omega}{k}=\\frac{1}{\\sqrt{\\mu\\epsilon}}=\\frac{c}{n}(n=\\sqrt{\\mu_r\\epsilon_r})$\n  群速度 $v_g = \\frac{d\\omega}{dk}$\n  波阻抗 $\\eta=\\sqrt\\frac{\\mu}{\\epsilon}$\n  振幅比 $|\\frac{E}{B}| = \\frac{c}{n} = v_p$\n  下考虑电磁波的能量和能流。在平面电磁波中，电场能量和磁场能量相同，能量密度： $$ w = \\frac{1}{2}(E\\times D+H\\times B) = \\frac{1}{2}(\\epsilon E^2+\\frac{1}{\\mu}B^2) = \\epsilon E^2=\\frac{1}{\\mu}B^2 $$ 能流： $$ S = E\\times H = E\\times\\sqrt{\\frac{\\epsilon}{\\mu}}\\hat k \\times E = \\sqrt\\frac{\\epsilon}{\\mu}E^2\\hat e_k=\\frac{1}{\\eta}E^2\\hat e_k $$ 平均能量密度： $$ \\bar w =\\frac{1}{2}\\epsilon E_0^2=\\frac{1}{2\\mu}B_0^2 $$ 平均能流： $$ \\bar S =\\frac{1}{2}\\sqrt{\\frac{\\epsilon}{\\mu}}E_0^2\\hat e_k =\\frac{1}{2\\eta}E_0^2\\hat e_k $$\n  注意到在瞬时计算公式中用的是$E$，而在平均计算公式中用的是$E_0$ $E^2$不可写作$|E|^2$，因为$|E|^2=E\\cdot E^\\star$，与$E\\cdot E$不同！   ","date":"2022-05-30T00:00:00Z","permalink":"https://ther-nullptr.github.io/posts/electromagnetic_fields_and_waves/electromagnetic_fields_and_waves02/","title":"平面电磁场"},{"content":"电磁场的反射与折射 振幅 边界条件满足： $$ \\hat n\\times(E_2-E_1)=0\\ \\hat n\\times(B_2-B_1)=0 $$ 反射定律和折射定律（角度关系）显然可得。下讨论振幅关系：\n N波（此时$H$和$H^\\prime$都指向内侧，指向外侧则第二式方向相反） $$ E+E^\\prime=E^{\\prime\\prime}\\ \\frac{E}{\\eta_1}\\cos\\theta_1-\\frac{E^\\prime}{\\eta_1}\\cos\\theta_1=\\frac{E^{\\prime\\prime}}{\\eta_2}\\cos\\theta_2 $$   $\\hat n \\times E$的方向指向右侧，$\\hat n \\times H$和$\\hat n \\times H^{\\prime\\prime}$的方向指向下方，$\\hat n \\times H^{\\prime}$的方向指向上方。\n   P波（此时$E$和$E^\\prime$都指向内侧，指向外侧则第二式方向相反） $$ E\\cos\\theta_1-E^\\prime\\cos\\theta_1=E^{\\prime\\prime}\\cos\\theta_2\\\n\\frac{E}{\\eta_1}+\\frac{E^\\prime}{\\eta_1}=\\frac{E^{\\prime\\prime}}{\\eta_2} $$\n   $\\hat n \\times H$的方向指向右侧，$\\hat n \\times H$和$\\hat n \\times H^{\\prime\\prime}$的方向指向上方，$\\hat n \\times H^{\\prime}$的方向指向下方。\n 根据上述关系可以推导出振幅关系（Fresnel公式）。\n特别地，在N波中，由于$\\frac{E^\\prime}{E} = -\\frac{\\sin(\\theta_1-\\theta_2)}{\\sin(\\theta_1+\\theta_2)}$，当$\\theta_1\u0026gt;\\theta_2$时，反射波和入射波反相，称为半波损失。\n在P波中，由于$\\frac{E^\\prime}{E} = \\frac{\\tan(\\theta_1-\\theta_2)}{\\tan(\\theta_1+\\theta_2)}$，当$\\theta_1+\\theta_2=\\frac{\\pi}{2}$时，无反射波，Brewster角 $\\theta_B=\\arctan(\\frac{n_2}{n_1})$。\n波矢满足关系（回忆$k=\\omega\\sqrt{\\mu\\epsilon}$）： $$ k_x^{\\prime\\prime} = k_x = k\\sin\\theta \\ k^{\\prime\\prime}=k\\frac{v_1}{v_2} = kn_{21} $$\n能流 考虑复数Poynting矢量，注意到能流的方向与波矢方向相同： $$ \\bar S=\\frac{1}{2}(E\\times H^{\\star}) = \\frac{|E|^2}{2\\eta_1}\\hat e_i\\ \\bar S^\\prime=\\frac{|E^\\prime|^2}{2\\eta_1}\\hat e_r \\ \\bar S^{\\prime\\prime}=\\frac{|E^{\\prime\\prime}|^2}{2\\eta_2}\\hat e_t $$\n 此处不写作$E^2$的原因是存在共轭操作。\n 对上式取实部得到平均能流$\u0026lt;\\bar S\u0026gt;$，$\u0026lt;\\bar S^\\prime\u0026gt;$，$\u0026lt;\\bar S^{\\prime\\prime}\u0026gt;$。\n在垂直于界面的方向，能流满足： $$ \\hat n\\cdot(\\bar S+\\bar S^\\prime) = \\hat n\\cdot \\bar S^{\\prime\\prime}\\ \\hat n\\cdot(\u0026lt;\\bar S\u0026gt;+\u0026lt;\\bar S^\\prime\u0026gt;) = \\hat n\\cdot \u0026lt;\\bar S^{\\prime\\prime}\u0026gt;\\ $$ 据此可以计算出功率反射率$R$和功率折射率$T$： $$ R = |\\frac{\\hat n \\cdot\u0026lt;S_r\u0026gt;}{\\hat n \\cdot\u0026lt;S_i\u0026gt;}| = |\\frac{E^\\prime}{E}|^2\\ T = |\\frac{\\hat n \\cdot\u0026lt;S_t\u0026gt;}{\\hat n \\cdot\u0026lt;S_i\u0026gt;}| = |\\frac{E^{\\prime\\prime}}{E}|^2\\frac{\\eta_1\\cos\\theta_2}{\\eta_2\\cos\\theta_1} $$\n 若不考虑介质损失，两者满足$R+T=1$\n 全反射 发生全反射时，$\\sin\\theta_1\u0026gt;n_{21}$，此时$\\sin\\theta_2=\\frac{\\sin \\theta_1}{n_{21}}$，$\\cos\\theta_2 = i\\sqrt{\\frac{\\sin^2\\theta_1}{n_{21}^2}-1}$\n反射波与入射波满足： $$ \\frac{E^{\\prime}}{E} = e^{-i2\\theta} \\ \\theta_N = \\arctan\\frac{\\sqrt{\\sin^2\\theta_1-n_{21}^2}}{\\cos \\theta_1}\\ \\theta_P = \\arctan\\frac{\\sqrt{\\sin^2\\theta_1-n_{21}^2}}{n_{21}^2\\cos \\theta_1} $$ 首先考虑，在非全反射的情况下，考虑$k^{\\prime\\prime}$在不同方向上的分量： $$ k_x^{\\prime\\prime} = k^{\\prime\\prime}\\sin\\theta_2\\ k_z^{\\prime\\prime} = k^{\\prime\\prime}\\cos\\theta_2 $$ 可以对电场进行进一步展开： $$ E^{\\prime\\prime} = E_0^{\\prime\\prime}e^{i(k^{\\prime\\prime}xx+k^{\\prime\\prime}zz-\\omega t)} $$ 而在全反射情况下，注意到$k_x^{\\prime\\prime} \u0026gt;k^{\\prime\\prime}$： $$ k_z^{\\prime\\prime} = k^{\\prime\\prime}\\cos\\theta_2=ik\\sqrt{\\sin^2\\theta_1-n{21}^2} $$ 令$\\kappa = k\\sqrt{\\sin^2\\theta_1-n{21}^2}$，则(10)式可以化为： $$ E^{\\prime\\prime} = E_0^{\\prime\\prime}e^{-\\kappa z}e^{i(k^{\\prime\\prime}_xx-\\omega t)} $$ 该场只沿$x$方向传播，沿$z$方向衰减。定义电场衰减为$e^{-1}$时的深度为穿透深度： $$ \\delta = \\kappa^{-1} $$ 相速度（慢波）： $$ v = \\frac{\\omega}{k_x^{\\prime\\prime}} = \\frac{\\omega}{k^{\\prime\\prime}\\sin\\theta_2}\u0026lt; \\frac{\\omega}{k^{\\prime\\prime}} = \\frac{c}{n_2} $$\n之后，我们考虑在介质1中的合电磁场（注意到两者振幅相等，仅有$2\\theta$的相位差）： $$ E_1 = E+E^\\prime=E_0e^{i(k_xx+k_zz-\\omega t)}+E_0e^{i(k_xx-k_zz-\\omega t-2\\theta)} = 2\\cos(k_zz-\\theta)e^{i(k_xx-\\omega t-\\theta)} $$ 相速度（快波）： $$ v = \\frac{\\omega}{k_x} = \\frac{\\omega}{k\\sin\\theta_1}\u0026gt; \\frac{\\omega}{k} = \\frac{c}{n_1} $$\n下计算磁场。假设为N波（即$E$只有$y$分量，$E_y^{\\prime\\prime}=E^{\\prime\\prime}$）： $$ H^{\\prime\\prime}=\\frac{1}{\\eta_2}\\hat k^{\\prime\\prime}\\times E^{\\prime\\prime} $$ 则： $$ H_{z}^{\\prime\\prime}=\\frac{1}{\\eta_2}\\sin\\theta_2E_y^{\\prime\\prime}=\\frac{1}{\\eta_2}\\frac{\\sin\\theta_1}{n_{21}}E^{\\prime\\prime} \\ H_{x}^{\\prime\\prime}=-\\frac{1}{\\eta_2}\\cos\\theta_2E_y^{\\prime\\prime}=-i\\frac{1}{\\eta_2}\\sqrt{\\frac{\\sin^2\\theta_1}{n_{21}^2}-1}E^{\\prime\\prime} $$\n 牢记$\\hat e_x\\times\\hat e_y=\\hat e_z$，$\\hat e_z\\times\\hat e_y=-\\hat e_x$。\n 于是可以计算不同分量的能流： $$ \\bar S_x^{\\prime\\prime} = \\frac{1}{2}Re(E_y^{\\prime\\prime}\\times H_z^{\\prime\\prime})=\\frac{1}{2}\\frac{1}{\\eta_2}|E_0^{\\prime\\prime}|^2e^{-2\\kappa z}\\frac{\\sin \\theta_1}{n_{21}}\\ \\bar S_z^{\\prime\\prime} = -\\frac{1}{2}Re(E_y^{\\prime\\prime}\\times H_x^{\\prime\\prime}) = 0 $$\n","date":"2022-05-30T00:00:00Z","permalink":"https://ther-nullptr.github.io/posts/electromagnetic_fields_and_waves/electromagnetic_fields_and_waves03/","title":"电磁场的反射与折射"},{"content":"冰菓 今夜与君\n爱梦相会\n务必觅得\n微眠之约\n萌生此等惬意\n实乃徒增彷徨\n予君之意\n君不知乎\n察其目光\n未萦他意\n宛如待友\n毫无二致\n许愿星逝于晓\n夜现晨湮之法\n愿君得察\n今夜与君\n爱梦相会\n务必觅得\n微眠之约\n","date":"2022-05-29T16:24:16+08:00","permalink":"https://ther-nullptr.github.io/posts/small_talk/ice-cream/","title":"Ice Cream"},{"content":"Hugo commands  create a article  1  $ hugo new post/first.md    start hugo server  1 2  $ hugo server # simple debug $ hugo server --theme=Mainroad --buildDrafts # debug with theme    watch environment info  1  $ hugo env   ","date":"2022-05-29T00:00:00Z","permalink":"https://ther-nullptr.github.io/posts/awesome_toolkits/command/","title":"Hugo Commands"},{"content":"utils 本节记录一些期中之前常用的公式。\nMaxwell方程组的n种形式 1.真空中的Maxwell方程组 $$ \\nabla \\times E = -\\frac{\\partial B}{\\partial t} \\newline\n\\nabla \\times B = \\mu_0J_0+\\mu_0\\epsilon_0\\frac{\\partial E}{\\partial t}\\newline\n\\nabla \\cdot E = \\frac{\\rho}{\\epsilon_0 }\\newline\n\\nabla \\cdot B = 0 $$\n2.介质中的Maxwell方程组 $$ \\nabla \\times E = -\\frac{\\partial B}{\\partial t}\\newline\n\\nabla \\times H = J+\\frac{\\partial D}{\\partial t}\\newline\n\\nabla \\cdot D = \\rho\\newline\n\\nabla \\cdot B = 0 $$\n3.频域Maxwell方程组 注：此处的Fourier变换与Signal and System中不同。\n$$ \\nabla \\times E = i\\omega B\\newline\n\\nabla \\times H = J-i\\omega D\\newline\n\\nabla \\cdot D = \\rho\\newline\n\\nabla \\cdot B = 0 $$\n4.导体Maxwell方程组 $$ \\nabla \\times E = i\\omega \\mu H\\newline\n\\nabla \\times H = -i\\omega\\bar\\epsilon E\\newline\n\\nabla \\cdot D = \\rho (0)\\newline\n\\nabla \\cdot B = 0 $$\n其中$\\bar \\epsilon=\\epsilon+i\\frac{\\sigma}{\\omega}$\n5.介质Maxwell方程组 $$ \\nabla \\times E = i\\omega B\\newline\n\\nabla \\times H = -i\\omega D\\newline $$\n细节将在平面波一节讨论。\n","date":"2022-05-29T00:00:00Z","permalink":"https://ther-nullptr.github.io/posts/electromagnetic_fields_and_waves/electromagnetic_fields_and_waves00/","title":"Maxwell's Equations"},{"content":"一个loser的喃喃自语。 暑假可能会高强度更新，记录这诡谲的岁月。\n","date":"2022-05-29T00:00:00Z","permalink":"https://ther-nullptr.github.io/posts/intro/","title":"Null"},{"content":"电磁场的能流 瞬时Poynting定理 能流$w=w(x,t)$表示的是场单位体积的能量，场内的总能量：\n$$ \\int_VwdV $$\n据此可以写出能量守恒式：\n$$ \\int_{\\infty} f\\cdot vdV=-\\frac{d}{dt} \\int_{\\infty} wdV $$\n左式为场对电荷做的总功率，右式为场的总能量的减小率。\n根据洛伦兹力公式、Maxwell方程第2式，可以得到：\n$$ f\\cdot v=J\\cdot E=(\\nabla\\times H-\\frac{\\partial D}{\\partial t})\\cdot E $$\n根据矢量分析公式、Maxwell方程第1式，可以得到：\n$$ J\\cdot E = -\\nabla \\cdot (E\\times H)-E \\cdot \\frac{\\partial D}{\\partial t} - H\\cdot \\frac{\\partial B}{\\partial t} $$\n三项分别为电场储能、磁场储能、电荷动能（焦耳热）即：\n$$ -\\nabla\\cdot S = \\frac{\\partial (E\\cdot D)}{2\\partial t}+\\frac{\\partial (H\\cdot B)}{2\\partial t}+E\\cdot J $$\n 此处$\\frac{\\partial (E\\cdot D)}{2\\partial t}=\\frac{\\partial (\\epsilon E^2)}{2\\partial t}=\\frac{E\\partial (\\epsilon E)}{\\partial t}=E \\cdot \\frac{\\partial D}{\\partial t}$\n 积分得：\n$$ -\\int_SS\\cdot ds=\\frac{d}{dt}\\int_V(w_e+w_m)dV+\\int_VE\\cdot JdV $$\n此为瞬时Poynting定理。\n时谐场和复数Poynting定理 对在$x$处的电场进行FT，得到在$\\omega$处的系数$E(x)$。该处振幅的大小显然按照时间周期性变化，得到关于时间变化的场：\n$$ E(x,t)=Re(E(x)e^{-i\\omega t}) $$\n 不一定为$E(x)\\cos(\\omega t)$，因为Fourier系数可能为复数。\n 此时的Poynting矢量$S(x,t)$可表示为：\n$$ S(x,t)=E(x,t)\\times H(x,t) = Re(E(x)e^{-i\\omega t})\\times Re(H(x)e^{-i\\omega t}) $$\n化简可得：\n$$ S(x,t) = \\frac{1}{2}[Re(E(x)\\times H^\\star(x))+Re(E(x)\\times H(x)e^{-i2\\omega t})] $$\n其中，第一项为时不变，第二项为时变。于是我们定义平均能流：\n$$ =Re(\\frac{E\\times H^\\star}{2}) $$\n定义复数能流$\\bar S = \\frac{1}{2}(E\\times H^\\star)$，根据频域Maxwell方程组1，2式和矢量展开式，得：\n$$ -\\nabla \\cdot \\bar S = -\\nabla \\cdot \\frac{1}{2}(E\\times H^\\star)= \\frac{1}{2}(-(\\nabla \\times E)\\cdot H+(\\nabla \\times H^\\star) \\cdot E)=\\frac{i\\omega}{2}(E\\cdot D^\\star-B\\times H^\\star)+\\frac{1}{2}E\\times J^\\star $$\n其中$w_e=\\frac{1}{4}(E\\cdot D^{\\star})$，$w_m=\\frac{1}{4}(B\\cdot H^{\\star})$，此即复数Poynting定理，注意到磁场能前的符号为负。\n进一步，对式子两侧取实部，得：\n$$ -\\nabla = Re(\\nabla \\times\\frac{1}{2}(E\\times H^\\star))= -Im[\\frac{\\omega}{2}(E\\cdot D^\\star-B\\times H^\\star)+Re(\\frac{1}{2}E\\times J^\\star)] $$\n","date":"2022-05-29T00:00:00Z","permalink":"https://ther-nullptr.github.io/posts/electromagnetic_fields_and_waves/electromagnetic_fields_and_waves01/","title":"电磁场的能流"}]